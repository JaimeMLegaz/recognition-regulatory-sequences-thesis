lowerEdge <- (posNum * (i-1)) + 1
upperEdge <- (posNum * i)
trainedWith <- lowerEdge:upperEdge
genesN[trainedWith,14+i] <- 1
for (j in usedForTrainPos[[i]]){
genesP[j,9+i] <- 1
}
for (j in allRowsP[-usedForTrainPos[[i]]]){
genesP[j,14+i] <- 1
}
genesN[usedForTrainNeg[[i]],9+i] <- 1
genesN[usedForTrainNeg[[i]],14+i] <- 0
}
str(genesN)
# If done correctly, this should output 10 zeroes
for (i in 1:5){
print(sum(genesP[,9+i] == 1 && genesP[,14+i] == 1))
print(sum(genesN[,9+i] == 1 && genesP[,14+i] == 1))
}
str(genesN$model2)
saveGenesN <- genesN
str(genesN)
for (i in 1:5) {
genesN[,(4+i)] <- 1 - genesN[,(4+i)]
}
str(genesN)
table(genesN[,5])
table(saveGenesN[,5])
genesP$totalSum <- genesP$model1 + genesP$model2 + genesP$model3 + genesP$model4 + genesP$model5
genesN$totalSum <- genesN$model1 + genesN$model2 + genesN$model3 + genesN$model4 + genesN$model5
#write.csv(genesN,file="Results/finalEvaluationN", row.names = FALSE, col.names = FALSE, quote = FALSE)
#genesN
allGenes <- rbind(genesP,genesN)
genesP$diseaseAssociation <- 1
genesN$diseaseAssociation <- 0
#write.csv(genesN,file="Results/finalEvaluationN", row.names = FALSE, col.names = FALSE, quote = FALSE)
#genesN
allGenes <- rbind(genesP,genesN)
table(allGenes$diseaseAssociation)
allFrame <- rbind(frameP,frameN)
allFrame
write.csv(allFrame,file="Results/stats",row.names = FALSE, col.names = FALSE, quote = FALSE)
write.csv(allGenes,file="Results/finalEvaluationAllGenes", row.names = FALSE, col.names = FALSE, quote = FALSE)
models <- c("Model1","Model2","Model3","Model4","Model5")
summaryP <- data.frame(matrix(0, ncol=7, nrow=5))
colnames(summaryP) <-  c("TrainedRight","TrainedWrong","UntrainedRight","UntrainedWrong", "RateTrainedRight", "RateUntrainedRight","DiseaseAssociated")
summaryN <- data.frame(matrix(0, ncol=7, nrow=5))
colnames(summaryN) <- c("TrainedRight","TrainedWrong","UntrainedRight","UntrainedWrong", "RateTrainedRight", "RateUntrainedRight","DiseaseAssociated")
finalEvalP <- genesP
finalEvalN <- genesN
str(summaryP)
str(finalEvalP)
# If done correctly, this should output 10 zeroes
for (i in 1:5){
print(sum(finalEvalP[,9+i] == 1 && finalEvalP[,14+i] == 1))
print(sum(finalEvalN[,9+i] == 1 && finalEvalN[,14+i] == 1))
}
View(genesN)
View(genesN)
models <- c("Model1","Model2","Model3","Model4","Model5")
summaryP <- data.frame(matrix(0, ncol=7, nrow=5))
colnames(summaryP) <-  c("TrainedRight","TrainedWrong","UntrainedRight","UntrainedWrong", "RateTrainedRight", "RateUntrainedRight","DiseaseAssociated")
summaryN <- data.frame(matrix(0, ncol=7, nrow=5))
colnames(summaryN) <- c("TrainedRight","TrainedWrong","UntrainedRight","UntrainedWrong", "RateTrainedRight", "RateUntrainedRight","DiseaseAssociated")
finalEvalP <- genesP
finalEvalN <- genesN
str(summaryP)
str(finalEvalP)
allRowsN <- 1:nrow(genesN)
allRowsP <- 1:nrow(genesP)
for (i in 1:5){
trainedWithNeg <-usedForTrainNeg[[i]]
notTrainedWithNeg <- allRowsN[-trainedWithNeg]
countTrainNeg <- sum(finalEvalN[trainedWithNeg,(4+i)] == 0) # Counts the number of genes used for training predicted as negative
countUntrainNeg <- sum(finalEvalN[notTrainedWithNeg,(4+i)] == 0) # Counts the number of genes not used for training predicted as negative
summaryN[i,] <- c(countTrainNeg,length(trainedWithNeg) - countTrainNeg, countUntrainNeg, length(notTrainedWithNeg) - countUntrainNeg, countTrainNeg/length(trainedWithNeg), countUntrainNeg/length(notTrainedWithNeg), 0)
trainedWithPos <-usedForTrainPos[[i]]
notTrainedWithPos <- allRowsP[-trainedWithPos]
countTrainPos <- sum(finalEvalP[trainedWithPos,(4+i)] == 1) # Counts the number of genes used for training predicted as positive
countUntrainPos <- sum(finalEvalP[notTrainedWithPos,(4+i)] == 1) # Counts the number of genes not used for training predicted as positive
summaryP[i,] <- c(countTrainPos,length(trainedWithPos) - countTrainPos, countUntrainPos, length(notTrainedWithPos) - countUntrainPos, countTrainPos/length(trainedWithPos), countUntrainPos/length(notTrainedWithPos), 1)
}
# 10 to 14
finalEvalP$trainingModel1 <- 0
finalEvalP$trainingModel2 <- 0
finalEvalP$trainingModel3 <- 0
finalEvalP$trainingModel4 <- 0
finalEvalP$trainingModel5 <- 0
#15 to 19
finalEvalP$evaluationModel1 <- 0
finalEvalP$evaluationModel2 <- 0
finalEvalP$evaluationModel3 <- 0
finalEvalP$evaluationModel4 <- 0
finalEvalP$evaluationModel5 <- 0
finalEvalN$trainingModel1 <- 0
finalEvalN$trainingModel2 <- 0
finalEvalN$trainingModel3 <- 0
finalEvalN$trainingModel4 <- 0
finalEvalN$trainingModel5 <- 0
finalEvalN$evaluationModel1 <- 0
finalEvalN$evaluationModel2 <- 0
finalEvalN$evaluationModel3 <- 0
finalEvalN$evaluationModel4 <- 0
finalEvalN$evaluationModel5 <- 0
for(i in 1:5){
lowerEdge <- (posNum * (i-1)) + 1
upperEdge <- (posNum * i)
trainedWith <- lowerEdge:upperEdge # Range of genes that this model used, either for train or for evaluation
finalEvalN[trainedWith,14+i] <- 1 # Default value is 1 for the evaluation and 0 for the training
for (j in usedForTrainPos[[i]]){ # If the gene was used in the training, the corresponding column gets a "1"
finalEvalP[j,9+i] <- 1
}
for (j in allRowsP[-usedForTrainPos[[i]]]){ # If not, the corresponding evaluation column gets a "1"
finalEvalP[j,14+i] <- 1
}
finalEvalN[usedForTrainNeg[[i]],9+i] <- 1 # We already have the list of negative genes used for the training of that model, so we set their training value to 1...
finalEvalN[usedForTrainNeg[[i]],14+i] <- 0 # ...and their evaluation value to 0
}
# If done correctly, this should output 10 zeroes
for (i in 1:5){
print(sum(finalEvalP[,9+i] == 1 && finalEvalP[,14+i] == 1))
print(sum(finalEvalN[,9+i] == 1 && finalEvalN[,14+i] == 1))
}
knitr::opts_chunk$set(echo = TRUE)
seqUTR <- read.csv(file="../Data/UTR/Stats/finalEvaluationAllGenes")
seqUTR <- read.csv(file="../Data/UTR/Stats/finalEvaluationAllGenes")
str(seqUTR)
seqUTR <- read.csv(file="../Data/UTR/Stats/finalEvaluationAllGenes", stringsAsFactors = FALSE)
str(seqUTR)
barplot(length(seqUTR$raw5utr[seqUTR$diseaseAssociation == 0]))
barplot(length(seqUTR$raw5utr[seqUTR$diseaseAssociation == 0]), unique(length(seqUTR$raw5utr[seqUTR$diseaseAssociation == 0])))
table(length(seqUTR$raw5utr[seqUTR$diseaseAssociation == 0]))
str(seqUTR)
table(seqUTR$diseaseAssociation)
sum(seqUTR$diseaseAssociation == 0)
seqUTR$raw5utr[seqUTR$diseaseAssociation == 0]
length(seqUTR$raw5utr[seqUTR$diseaseAssociation == 0])
lengths(seqUTR$raw5utr[seqUTR$diseaseAssociation == 0])
nchar(seqUTR$raw5utr[seqUTR$diseaseAssociation == 0])
table(nchar(seqUTR$raw5utr[seqUTR$diseaseAssociation == 0]))
barplot(table(nchar(seqUTR$raw5utr[seqUTR$diseaseAssociation == 0])))
help(barplot)
barplot(table(nchar(seqUTR$raw5utr[seqUTR$diseaseAssociation == 0])), xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences")
barplot(table(nchar(seqUTR$raw5utr[seqUTR$diseaseAssociation == 1])), xlab="Lengths", ylab="# of Sequences", main="Length of Positive sequences")
barplot(table(nchar(seqUTR$raw5utr[seqUTR$diseaseAssociation == 0])), xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences")
barplot(table(nchar(seqUTR$raw5utr[seqUTR$diseaseAssociation == 1])), xlab="Lengths", ylab="# of Sequences", main="Length of Positive sequences")
barplot(table(nchar(seqUTR$raw5utr[seqUTR$diseaseAssociation == 0])), xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences")
barplot(table(nchar(seqUTR$raw5utr[seqUTR$diseaseAssociation == 1])), xlab="Lengths", ylab="# of Sequences", main="Length of Positive sequences")
CBA.goodSeqs <- np = read.csv("../Results/goodseqs.tsv", stringsAsFactors=F, sep = "\t")
CBA.goodSeqs <- read.csv("../Results/goodseqs.tsv", stringsAsFactors=F, sep = "\t")
CBA.badSeqs <- read.csv("../Results/badseqs.tsv", stringsAsFactors=F, sep = "\t")
str(CBA.goodSeqs)
CBA.goodSeqs <- read.csv("../Results/goodseqs.tsv", stringsAsFactors=F, sep = "\t", column.names = TRUE)
help(read.csv)
CBA.goodSeqs <- read.table("../Results/goodseqs.tsv", stringsAsFactors=F, sep = "\t", column.names = TRUE)
CBA.goodSeqs <- read.table("../Results/goodseqs.tsv", stringsAsFactors=F, sep = "\t")
CBA.badSeqs <- read.table("../Results/badseqs.tsv", stringsAsFactors=F, sep = "\t")
CBA.goodSeqs
str(CBA.goodSeqs)
PosSequences <- read.csv("Data/UTR/PositiveUTRSequences_untreated")
PosSequences <- read.csv("../Data/UTR/PositiveUTRSequences_untreated")
NegSequences <- read.csv("../Data/UTR/NegativeUTRSequences_untreated")
PosSequences$ensembl_gene_id <- as.character(PosSequences$ensembl_gene_id)
PosSequences$X5utr <- as.character(PosSequences$X5utr)
NegSequences$ensembl_gene_id <- as.character(NegSequences$ensembl_gene_id)
NegSequences$X5utr <- as.character(NegSequences$X5utr)
# We save the sequences for later use
PosSequences$raw5utr <- PosSequences$X5utr
NegSequences$raw5utr <- NegSequences$X5utr
# Example of sequence: AACCGT
PosSequences$X5utr[1]  # Example of a positive sequence
NegSequences$X5utr[1]  # Example of a negative sequence
# strReverse:  AACCGT --> TGCCAA
#PosSequences$X5utr <- strReverse(PosSequences$X5utr)
#NegSequences$X5utr <- strReverse(NegSequences$X5utr)
PosSequences$X5utr[1]  # The positive sequence, once reversed
NegSequences$X5utr[1]  # The negative sequence, once reversed
# padding_sequences: Inserts padding characters ("X") in sequences shorter than 250 characters, and trims sequences longer than 250 characters
PosSequences$X5utr <- padding_sequences_left(PosSequences$X5utr)
library(biomaRt)
library(SetupSequences)
library(keras)
library(caret)
# We save the sequences for later use
PosSequences$raw5utr <- PosSequences$X5utr
NegSequences$raw5utr <- NegSequences$X5utr
# Example of sequence: AACCGT
PosSequences$X5utr[1]  # Example of a positive sequence
NegSequences$X5utr[1]  # Example of a negative sequence
# strReverse:  AACCGT --> TGCCAA
#PosSequences$X5utr <- strReverse(PosSequences$X5utr)
#NegSequences$X5utr <- strReverse(NegSequences$X5utr)
PosSequences$X5utr[1]  # The positive sequence, once reversed
NegSequences$X5utr[1]  # The negative sequence, once reversed
# padding_sequences: Inserts padding characters ("X") in sequences shorter than 250 characters, and trims sequences longer than 250 characters
PosSequences$X5utr <- padding_sequences_left(PosSequences$X5utr)
NegSequences$X5utr <- padding_sequences_left(NegSequences$X5utr)
PosSequences$X5utr[1]  # The positive sequence, with some characters added so it can be 250 characters long
NegSequences$X5utr[1]  # The negative sequence, trimmed so it becomes 250 characters long
# to_onehot:   TGCCAA --> 00010010010010001000    (A = 1000, C = 0100, G = 0010, T = 0001)
PosSequences$X5utr <- to_onehot(PosSequences$X5utr)
NegSequences$X5utr <- to_onehot(NegSequences$X5utr)
PosSequences$X5utr[1]  # The positive sequence, reversed, padded and one-hot encoded
NegSequences$X5utr[1]  # The negative sequence, reversed, trimmed and one-hot encoded
# Final check: Since some of the sequences might be corrupt, we will delete the ones that are corrupt, if they exist
# We can know if a sequence is corrupt by looking for the W character. When one-hot encoding, we encoded everything that was not an A, T, C or G with a "W"
if (any(grepl("W",PosSequences$X5utr)))
PosSequences <- PosSequences[-which(grepl("W",PosSequences$X5utr)),]
if (any(grepl("W",NegSequences$X5utr)))
NegSequences <- NegSequences[-which(grepl("W",NegSequences$X5utr)),]
seqUTR <- append(PosSequences$X5utr,NegSequences$X5utr)
fileCon<-file("../Data/UTR/SeqUTR_XXXABC")
write.table(seqUTR,file = fileCon, quote=FALSE, row.names = FALSE, col.names = FALSE)
SeqUTR <- scan(file="../Data/UTR/SeqUTR_XXXABC",what="character")
SeqUTR <- SeqUTR[-which(duplicated(SeqUTR))]
posNum <- 3657 # There are 3657 positive sequences
n2 <- nchar(SeqUTR[1]) -1 # Number of divisions to make
secuenciasOH <- sapply(1 + 1*0:n2, function(z) substr(SeqUTR, z, z))  # Obtaining the split characters
df <- data.frame(secuenciasOH, "Value" = 0) # Saving them into a dataframe
indx <- sapply(df, is.factor)
df[indx] <- lapply(df[indx], function(x) as.character(x)) # Factor --> char conversion
df[1:posNum,]$Value <- 1 # We have the value of the positive sequences to positive
start = posNum + 1
end = start + posNum - 1
df.a <- df[c(1:posNum,start:end),]
df.b <- df[c(1:posNum,(start + posNum):(end + posNum)),]
df.c <- df[c(1:posNum,(start + (posNum*2)):(end + (posNum*2))),]
df.d <- df[c(1:posNum,(start + (posNum*3)):(end + (posNum*3))),]
df.e <- df[c(1:posNum,(start + (posNum*4)):(end + (posNum*4))),]
dfs <- list(df.a, df.b, df.c, df.d, df.e)
output <- c("Value")
trains <- list()
tests <- list()
usedForTrainPos <- list()
usedForTrainNeg <- list()
for (i in 1:5){
partition <- createDataPartition(dfs[[i]][[output]],
p = 0.8,
list = FALSE,
times = 1)
trains <- append(trains, list(dfs[[i]][partition,]))
tests <- append(tests, list(dfs[[i]][-partition,]))
offset <- posNum * (i - 1)
partPos <- partition[partition <= posNum]
partNeg <- partition[partition > posNum]
partNeg <- partNeg + offset
usedForTrainPos <- append(usedForTrainPos,list(unlist(partPos)))
usedForTrainNeg <- append(usedForTrainNeg,list(unlist(partNeg)))
}
#usedForTrainPos <- usedForTrainPos[-which(duplicated(usedForTrainPos))] # Only the positive genes could be duplicated
train.x <- list()
train.y <- list()
test.x <- list()
test.y <- list()
for (i in 1:5){
train.x <- append(train.x, list(data.matrix(trains[[i]][,1:1250])))
train.y <- append(train.y, list(data.matrix(trains[[i]][,1251])))
test.x <- append(test.x, list(data.matrix(tests[[i]][,1:1250])))
test.y <- append(test.y, list(data.matrix(tests[[i]][,1251])))
train.x[[i]] <- array_reshape(train.x[[i]], c(nrow(trains[[i]]),1250,1))
test.x[[i]] <- array_reshape(test.x[[i]], c(nrow(tests[[i]]),1250,1))
}
# Next step is making a dataframe of every control gene and predicting positive or negative
genesN <- NegSequences
genesP <- PosSequences
##### We have to make some transformations to these secuences
n2 <- nchar(genesN$X5utr[1]) - 1
secuencesOH <- sapply(1 + 1*0:n2, function(z) substr(genesN$X5utr, z, z))
dfn <- data.frame(secuencesOH, gene=genesN$hgnc_symbol)
indx <- sapply(dfn, is.factor)
dfn[indx] <- lapply(dfn[indx], function(x) as.character(x))  #
secuencesOH <- sapply(1 + 1*0:n2, function(z) substr(genesP$X5utr, z, z))
dfp <- data.frame(secuencesOH, gene=genesP$hgnc_symbol)
indx <- sapply(dfp, is.factor)
dfp[indx] <- lapply(dfp[indx], function(x) as.character(x))
# We have got a dataframe with the ensembl_id, sequence and hgnc symbol in genesP and genesN, and a dataframe with the split sequence and hgnc symbol in dfp and dfn
finalSequencesN <- data.matrix(dfn[,1:1250])
finalSequencesN <- array_reshape(finalSequencesN,c(nrow(finalSequencesN),1250,1))
finalSequencesP <- data.matrix(dfp[,1:1250])
finalSequencesP <- array_reshape(finalSequencesP,c(nrow(finalSequencesP),1250,1))
genesP$model1 <- 0
genesP$model2 <- 0
genesP$model3 <- 0
genesP$model4 <- 0
genesP$model5 <- 0
genesN$model1 <- 0
genesN$model2 <- 0
genesN$model3 <- 0
genesN$model4 <- 0
genesN$model5 <- 0
batch_size <- 125
epochs <- 125
input_shape <- c(1250,1)
learn_rate = 0.0001
modelConvolu <- keras_model_sequential()
modelConvolu %>%
layer_conv_1d(filters = 48, kernel_size = 75, activation = "relu", input_shape = input_shape)%>%
layer_flatten() %>%
layer_dense(units = 50, activation = 'relu') %>%
layer_dense(units = 1, activation="sigmoid") %>%
summary(model)
modelConvolu %>% compile(
loss = loss_binary_crossentropy,
optimizer = optimizer_nadam(lr = learn_rate),
metrics = c('accuracy')
)
for (i in 1:5){
sens <- NULL
spec <- NULL
history <- NULL
modelConvolu <- keras_model_sequential()
modelConvolu %>%
layer_conv_1d(filters = 48, kernel_size = 75, activation = "relu", input_shape = input_shape)%>%
layer_flatten() %>%
layer_dense(units = 50, activation = 'relu') %>%
layer_dense(units = 1, activation="sigmoid")
modelConvolu %>% compile(
loss = loss_binary_crossentropy,
optimizer = optimizer_nadam(lr = learn_rate),
metrics = c('accuracy')
)
for (epoch in 1:epochs){
historial <- modelConvolu %>% fit(
x = train.x[[i]],
y = train.y[[i]],
epochs = 1,
batch_size = batch_size,
validation_data = list(test.x[[i]], test.y[[i]]),
verbose = 2)
history <- c(history, historial)
}
## Prediction
pred <- modelConvolu %>% predict(finalSequencesP, batch_size = batch_size)
genesP[,4+i] = round(pred)
pred <- modelConvolu %>% predict(finalSequencesN, batch_size = batch_size)
genesN[,4+i] = round(pred)
}
knitr::opts_chunk$set(echo = TRUE)
plot(density(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])), xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences"))
UTRseq <- read.csv(file="../Data/UTR/Stats/finalEvaluationAllGenes", stringsAsFactors = FALSE)
plot(density(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])), xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences"))
library(ggplot2)
#df = as.data.frame(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])))+
#  geom_bar(stat="identity")
#pl <- ggplot(data=df, aes(x="length", y="frequency"))
#pl
plot(density(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))))
lines( x=bar, table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])))
plot(density(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))), xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences")
lines(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1])))
library(ggplot2)
#df = as.data.frame(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])))+
#  geom_bar(stat="identity")
#pl <- ggplot(data=df, aes(x="length", y="frequency"))
#pl
plot(density(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))), xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences")
lines(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1])), col="red")
#lines(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1])))
library(ggplot2)
#df = as.data.frame(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])))+
#  geom_bar(stat="identity")
#pl <- ggplot(data=df, aes(x="length", y="frequency"))
#pl
plot(density(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))), xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences")
lines(density(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1]))), col="red")
#lines(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1])))
density(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))
)
library(ggplot2)
#df = as.data.frame(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])))+
#  geom_bar(stat="identity")
#pl <- ggplot(data=df, aes(x="length", y="frequency"))
#pl
plot(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])), xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences")
lines(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1])), col="red")
#lines(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1])))
library(ggplot2)
#df = as.data.frame(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])))+
#  geom_bar(stat="identity")
#pl <- ggplot(data=df, aes(x="length", y="frequency"))
#pl
plot(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))*100/nrow(UTRseq), xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences")
lines(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1]))*100/nrow(UTRseq), col="red")
#lines(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1])))
library(ggplot2)
#df = as.data.frame(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])))+
#  geom_bar(stat="identity")
#pl <- ggplot(data=df, aes(x="length", y="frequency"))
#pl
plot(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))*100/nrow((UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])), xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences")
nrow((UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))
sum((UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))
UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]
sum(UTRseq$diseaseAssociation == 0)
sum(UTRseq$diseaseAssociation == 1)
library(ggplot2)
#df = as.data.frame(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])))+
#  geom_bar(stat="identity")
#pl <- ggplot(data=df, aes(x="length", y="frequency"))
#pl
plot(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))*100/sum(UTRseq$diseaseAssociation == 0), xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences")
lines(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1]))*100/sum(UTRseq$diseaseAssociation == 1), col="red")
#lines(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1])))
library(ggplot2)
#df = as.data.frame(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])))+
#  geom_bar(stat="identity")
#pl <- ggplot(data=df, aes(x="length", y="frequency"))
#pl
plot(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))*300/sum(UTRseq$diseaseAssociation == 0), xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences")
lines(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1]))*100/sum(UTRseq$diseaseAssociation == 1), col="red")
#lines(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1])))
library(ggplot2)
#df = as.data.frame(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])))+
#  geom_bar(stat="identity")
#pl <- ggplot(data=df, aes(x="length", y="frequency"))
#pl
plot(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])), xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences")
lines(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1])), col="red")
#lines(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1])))
library(ggplot2)
#df = as.data.frame(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])))+
#  geom_bar(stat="identity")
#pl <- ggplot(data=df, aes(x="length", y="frequency"))
#pl
plot(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))*100/sum(UTRseq$diseaseAssociation == 0), xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences")
lines(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1]))*100/sum(UTRseq$diseaseAssociation == 1), col="red")
#lines(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1])))
prueba <- cbind(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])), table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1])))
barplot(prueba, xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences", beside=T)
barplot(c(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])), table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1]))), xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences", beside=T)
barplot(c(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])), table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1]))), xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences")
barplot(c(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])), table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1]))),  xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences", col=c("orange","blue"))
table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])
)
str(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])))
table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))[,1]
dim(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))
)
as.numeric((table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])))
)
barplot(c(as.numeric(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])), as.numeric(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1])))),  xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences", col=c("orange","blue"))
barplot(c(as.numeric(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])), as.numeric(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1])))),  xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences", col=c("orange","blue")))
barplot(c(as.numeric(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))), as.numeric(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1])))),  xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences", col=c("orange","blue"))
library(ggplot2)
#df = as.data.frame(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])))+
#  geom_bar(stat="identity")
#pl <- ggplot(data=df, aes(x="length", y="frequency"))
#pl
plot(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))*100/sum(UTRseq$diseaseAssociation == 0), xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences")
lines(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1]))*100/sum(UTRseq$diseaseAssociation == 1), col="red")
barplot(c(as.numeric(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))), as.numeric(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1])))),  xlab="Lengths", ylab="# of Sequences", main="Length of Negative sequences", col=c("orange","blue"), besides=T)
#lines(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1]))*100/sum(UTRseq$diseaseAssociation == 1), col="red")
#lines(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1])))
knitr::opts_chunk$set(echo = TRUE)
results = read.csv("../Results/finalEvaluation",
stringsAsFactors=F)
sequences = results$raw5utr[results$diseaseAssociated == 1 &
results$model1 + results$model2 + results$model3 +
results$model4 + results$model5 == 0]
sequences
#Keep only disease genes and columns we need
dgenesdata = results[results$diseaseAssociated == 1,
c("model1","model2","model3","model4","model5",
"trainingModel1","trainingModel2","trainingModel3",
"trainingModel4","trainingModel5")]
#Create new table, with two columns. 1st column will hold the number
#of times it was used for training. 2nd column the number of times
#it was used and not classified as disease
out = t(apply(dgenesdata,1,function(x){
c(sum(x[6:10]),sum(sum(x[1] == 0 & x[6] == 1),
sum(x[2] == 0 & x[7] == 1),
sum(x[3] == 0 & x[8] == 1),
sum(x[4] == 0 & x[9] == 1),
sum(x[5] == 0 & x[10] == 1)))
}))
colnames(out) = c("timesused","notlearn")
#Now we plot everything
fout = NULL
for(times in 1:5){
mask = out[,1] == times
fout = rbind(fout,table(out[mask,2]))
}
rownames(fout) = 1:5
barplot(t(fout),beside = T,col=c("orange","blue"),
main="Seqs. across number of times used for training",
ylim=c(0,1500),
xlab="Times used in training 5 CNNs",
ylab="Sequences")
legend("topleft",legend=c("Used in training","Wrong classification"),
fill=c("orange","blue"),cex=0.7)
#Ratio across categories
cat("The following is the ratio across times used in training, from 1 to 5")
print(fout[,2]/fout[,1])
str(fout)
str(c(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])), table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1]))))
str(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))
)
table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))$dinmanes
table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))$dimnanes
table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))$dimnames
table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0]))[1]
data.table(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])))
prueba <- as.data.frame(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])))
str(prueba)
df_1 <- as.data.frame(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 0])))
df_2 <- as.data.frame(table(nchar(UTRseq$raw5utr[UTRseq$diseaseAssociation == 1])))
df_1[,1] <- as.numeric(df_1[,1])
df_2[,1] <- as.numeric(df_1[,1])
df_2[,1] <- as.numeric(df_2[,1])
str(df_1)
str(df_2)
df_both <- cbind(df_1, df_2)
